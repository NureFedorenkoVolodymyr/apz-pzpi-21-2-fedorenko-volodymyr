1 МОДЕЛЮВАННЯ  ПРОГРАМНОЇ СИСТЕМИ
1.1	Мета роботи

Для початку роботи необхідно визначити мету. Мета даної лабораторної роботи - розробити серверну частину для програмної системи для автоматизованого управління вітровими електростанціями.
Окрім цього необхідно навести опис прийнятих інженерних рішень, представити загальну архітектуру системи, показати будову серверних компонентів та структуру бази даних.

1.2 Аналіз предметної області

Для початку роботи необхідно провести концептуальне моделювання предметної області.
З використанням програмної системи користувачі повинні мати можливість зберігати, редагувати, видаляти, отримувати статистику за інформацією, що стосується роботи вітрових електростанцій.
Система матиме розподіл за двома ролями користувачів:
-	Звичайний користувач;
-	Адміністратор системи.

1.3 Аналіз інформаційних потреб користувачів

Далі необхідно проаналізувати інформаційні потреби обох видів користувачів системи.
Для цього було розроблено UML діаграму прецедентів для користувача та адміністратора (див. А.1).
У програмній системі користувач матиме можливість:
-	Взаємодіяти з особистим акаунтом:
-	Реєструватись у системі
-	Входити/виходити з системи
-	Переглядати інформацію профілю
-	Взаємодіяти з власними фермами:
-	Переглядати власні ферми
-	Додавати/редагувати/видаляти ферми
-	Переглядати їх детальну інформацію
-	Переглядати список вітряків ферми та статистику їх роботи
-	Взаємодіяти з вітряками:
-	Переглядати власні вітряки
-	Додавати/редагувати/видаляти вітряки
-	Переглядати інформацію про вітряк, статистику його роботи, об’єм виробленої енергії
-	Дистанційно змінювати режим роботи вітряка
-	Перегляд попереджень:
-	Отримувати повідомлення та переглядати попередження в системі про зміни в режимах роботи вітряка
-	Відправка даних вітряка:
-	Автоматично отримувати дані з датчиків вітряка
В той же час адміністратор матиме можливість:
-	Керувати системою:
-	Видаляти ферми
-	Видаляти вітряки
-	Видаляти записи датчиків вітряків
-	Реєструвати адміністраторів
-	Переглядати стан системи:
-	Переглядати усі ферми
-	Переглядати усі вітряки
-	Мати доступ до усіх записів датчиків та попереджень


 
2 ПРОЕКТУВАННЯ БАЗИ ДАНИХ
2.1 Проектування бази даних з використанням ER діаграми

Для проектування структури бази даних програмної системи було розроблено ER діаграму (див. А.3).
База даних міститиме 5 таблиць та 25 неключових атрибутів. Нижче наведено детальний опис усіх зв’язків між таблицями в базі даних.
Один користувач може мати багато ферм, але одна ферма належить лише одному користувачу. Один користувач може мати безліч попереджень, але одне попередження може належати лише одному користувачу. Одна ферма може містити багато вітряків, але один вітряк належить лише одній фермі. Один вітряк може мати безліч записів даних, але один запис може належати лише одному вітряку.



3 РОЗРОБКА СЕРВЕРНОЇ ЧАСТИНИ
3.1 Архітектура системи

Для початку роботи було розроблено UML діаграму розгортання (див. А.4). Програмна система міститиме 5 структурних частин:
-	Серверна частина
-	База даних
-	Веб застосунок
-	Мобільний застосунок
-	IoT девайс
З використанням діаграми було визначено зв’язки між вищезазначеними структурними частинами, а також протоколи їх взаємодії між собою.
Також для системи було розроблено UML діаграму станів (див. А.2).

3.2 REST специфікація
Alerts (Попередження)
-	GET /api/alerts: Отримує всі попередження.
Auth (Автентифікація)
-	POST /api/auth/login: Виконує вхід користувача.
-	POST /api/auth/register: Реєструє нового користувача.
-	POST /api/auth/register-admin: Реєструє нового адміністратора.
-	GET /api/auth/test: Тестує автентифікацію.
TurbineData (Дані вітряків)
-	POST /api/turbinedata: Додає дані вітряка.
-	DELETE /api/turbinedata/{dataId}: Видаляє дані вітряка за ID.
Turbines (Вітряки)
-	GET /api/turbines: Отримує всі вітряки.
-	POST /api/turbines: Додає новий вітряк.
-	GET /api/turbines/{turbineId}: Отримує вітряк за ID.
-	PUT /api/turbines/{turbineId}: Оновлює вітряк за ID.
-	DELETE /api/turbines/{turbineId}: Видаляє вітряк за ID.
-	POST /api/turbines/{turbineId}/status: Оновлює статус вітряка за ID.
-	GET /api/turbines/{turbineId}/data: Отримує дані вітряка за ID та період.
-	GET /api/turbines/{turbineId}/data/recent: Отримує останні дані вітряка за ID.
WindFarms (Ферми)
-	GET /api/windfarms: Отримує всі ферми.
-	POST /api/windfarms: Додає нову ферму.
-	GET /api/windfarms/{farmId}: Отримує ферму за ID.
-	PUT /api/windfarms/{farmId}: Оновлює ферму за ID.
-	DELETE /api/windfarms/{farmId}: Видаляє ферму за ID.
-	GET /api/windfarms/{farmId}/turbines: Отримує всі вітряки ферми за ID.

3.3 Розробка сервера

Для розробки серверної частини було використано ASP.NET Core Web API разом із мовою програмування C#. У якості середовища розробки застосовувалася Visual Studio 2022.




3.3.1 База даних та підключення

Для роботи з базою даних було використано Microsoft SQL Server Management Studio. Для взаємодії з базою даних з серверної частини було використано Entity Framework Core.
Для створення таблиць в базі даних було використано code-first підхід: створено класи в програмі та використано міграції на підключену базу даних.

3.3.2 Структура серверу

Бекенд поділено на 4 основних проекти:
-	PL (Web API) – містить контролери;
-	BLL (Class Library) – містить сервіси з бізнес логікою;
-	DAL (Class Library) – містить репозиторії для взаємодії з базою даних;
-	Core (Class Library) – містить класи основних моделей системи.
Контролери виступають точкою входу на сервер. Вони здійснюють первинну валідацію даних, після отримання запиту від клієнту контролери передають управління сервісам. Сервіси відповідають за бізнес логіку додатку, проводячи необхідні маніпуляції з об’єктами системи. Для взаємодії з базою даних сервіси використовують репозиторії, які вже безпосередньо підтримують зв’язок з базою даних через Entity Framework.

3.3.3 Автентифікація

Під час реєстрації новий користувач записується до бази даних (див. Б.1, рядок 56 - 87). Також зберігається роль користувача (UserRoles.User або UserRoles.Admin) в залежності від типу реєстрації (RegisterAsync або RegisterAdminAsync). Пароль користувача хешується за допомогою UserManager, і в базі зберігається лише хеш, для забезпечення безпеки.
Під час входу в систему (LoginAsync) метод перевіряє, чи існує користувач з введеною електронною адресою та чи правильний введений пароль (див. Б.1, рядок 29 - 35). Якщо дані коректні, створюється JWT-токен, який містить унікальний ідентифікатор (Guid), ім'я користувача та ролі (рядки 36 - 51). Цей токен використовується для відстеження сесії користувача після успішного входу.
Метод GetToken створює JWT-токен з відповідними вимогами (claims) та підписує його за допомогою секретного ключа даних (див. Б.1, рядок 138 - 154).

3.3.4 Вимірювання та аналіз даних вітряка

IoT девайс з певною періодичністю вимірює температуру навколишнього середовища та швидкість вітру. Ці дані надсилаються на сервер, де відбувається обробка. Перед записом цієї інформації до бази даних підраховується тиск повітря, його щільність, потужність вітряка в момент вимірювання, а також вироблена енергія за період даних (див. Б.2, рядок 41 - 108).
Далі на основі отриманих даних аналізується, чи потрібно змінювати режим роботи вітряка (див. Б.2, рядок 23 - 191). Якщо швидкість вітру в нормі, то вітряк перемикається в робочий (Operational) режим. Якщо швидкість вітру менша або більша за критичні значення для вітряка, то він перемикається в неробочий (Idle) режим. Користувач отримує попередження про зміну режиму роботи.

3.3.5 Управління фермами

Користувач має можливість створити, відредагувати чи видалити ферму. Також користувач може переглянути свої ферми, детальну інформацію за фермою чи список вітряків ферми.

3.3.6 Управління вітряками

Користувач має можливість створити, відредагувати чи видалити вітряк. Також користувач може переглянути свої вітряки, детальну інформацію за вітряком.
Також для кожного вітряка доступна статистика його роботи, зокрема вихідна потужність та кількість виробленої енергії за період.

3.3.7 Попередження

Користувач може переглядати список своїх попереджень та оперативно реагувати на зміни в станах та режимах вітряків.

3.4 Тестування

Для тестування функціональності сервера його можливості було протестовано з використанням Open API Swagger. Було визначено, що функціонал системи працює правильно та стабільно.



ПЕРЕЛІК ДЖЕРЕЛ
1.	DEMO відео. URL: https://youtu.be/8faESIBAYeE
2.	Репозиторій проекту. URL: https://github.com/NureFedorenkoVolodymyr/apz-pzpi-21-2-fedorenko-volodymyr
