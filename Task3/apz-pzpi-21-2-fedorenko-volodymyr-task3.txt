1 МОДЕЛЮВАННЯ  ПРОГРАМНОЇ СИСТЕМИ
1.1	Мета роботи

Для початку роботи необхідно визначити мету. Метою лабораторної роботи є розробка програмного забезпечення для IoT пристрою, що є частиною системи для автоматизованого управління вітровими електростанціями.
Окрім цього необхідно навести опис прийнятих інженерних рішень, діаграми, представити будову системи та її взаємодію з серверною частиною.

1.2	Моделювання програмної системи

	Для опису функціональності системи було створено UML діаграму прецедентів (див. А.1). Дана діаграма містить одну основну роль: користувач.
Користувач пристрою має можливість налаштовувати підключення до мережі Інтернет, входити до системи, змінювати поточний вітряк та період вимірювання даних, запускати вимірювання інформації з датчиків.
Повний цикл роботи описано нижче (див. А.2):
-	Система пропонує користувачеві налаштувати підключення до мережі. Тут користувач може змінити SSID та пароль Wi-Fi, або видалити пароль (якщо точка доступу не має паролю).
-	Після цього користувач може увійти до свого профілю. Якщо автентифікація успішна, то користувач може починати роботу з пристроєм.
-	На екран виводиться ідентифікатор поточного вітряка та період вимірювання даних. Користувач може почати вимірювати інформацію або налаштувати один з двох параметрів.
-	Після запуску вимірювання система через певний заданий проміжок часу отримує значення температури та швидкості вітру з датчиків та надсилає їх на сервер, де відбувається їх поточна обробка.



2	ПРОГРАМНА РЕАЛІЗАЦІЯ 
2.1 Архітектура програмної системи

Програмне забезпечення для пристрою IoT було розроблено на мові  програмування MicroPython у симуляторі Wokwi. Було використано мікроконтроллер Arduino ESP32, який має можливість підключення до мережі та виходу в мережу Інтернет, датчик температури та вологості (використовується як датчик швидкості вітру). 
У програмі використовуються HTTP-запити для взаємодії з серверною частиною, здійснювані за допомогою модуля urequests, який дозволяє реалізувати GET і POST запити до API. Також використовується модуль dht для взаємодії з датчиком.

2.2 Програмна розробка системи

Перед початком написання коду для IoT-пристрою було створено програмну схему, що описує взаємодію між його компонентами: контролером, сенсорами та серверною частиною (див. А.5). У коді використовуються глобальні змінні для зберігання даних сенсорів, мережевих налаштувань, параметрів частоти вимірювання, а також для зберігання інформації про поточного користувача та серверну частину.
Програма починається з ініціалізації основного сервісу WindSyncService та виклику його основної функції main() (див. main.py).

2.3.1 Модуль network_service.py

Модуль network_service.py відповідає за підключення до мережі Wi-Fi та налаштування мережевих параметрів.
Ініціалізація Wi-Fi модуля відбувається у класі NetworkService (див. Б.1, рядок 5 - 7). Функція connect_to_network() підключається до Wi-Fi мережі, використовуючи задані SSID та пароль. Вона включає цикл для очікування підключення (див. Б.1, рядок 9 - 18). Функція configure_network() забезпечує інтерфейс для зміни налаштувань Wi-Fi (див. Б.1, рядок 20 - 38), включаючи зміну SSID (див. Б.1, рядок 40 - 46), зміну пароля (див. Б.1, рядок 48 - 54) та видалення пароля (див. Б.1, рядок 56 - 61).

2.3.2 Модуль http_service.py

Модуль http_service.py відповідає за взаємодію з сервером через HTTP-запити. Клас HttpService містить функції для автентифікації та надсилання даних на сервер.
Функція login() здійснює POST-запит для входу в систему з використанням email та пароля (див. Б.2, рядок 11 - 33). Функція get_my_turbines() отримує список вітряків користувача (див. Б.2, рядок 35 - 49). Функція add_turbine_data() відправляє дані про температуру та швидкість вітру для конкретного вітряка (див. Б.2, рядок 51 - 79).

2.3.3 Модуль profile_service.py

Модуль profile_service.py відповідає за збереження інформації профілю користувача, такої як токен доступу та ідентифікатор вітряка.
Клас ProfileService містить методи для встановлення токену доступу, ідентифікатора вітряка та статусу вітряка (див. Б.3, рядок 3 - 15).

2.3.4 Модуль wind_sync_service.py

Модуль wind_sync_service.py реалізує основний функціонал програми. Клас WindSyncService ініціалізує необхідні сервіси та датчик DHT22 (див. Б.4, рядок 9 - 14).
Функція main() надає користувачу інтерфейс для вибору налаштувань мережі або входу в систему (див. Б.4, рядок 16 - 32). Функція __login() відповідає за підключення до мережі та автентифікацію (див. Б.4, рядок 34 - 49). Функція __configuration() надає інтерфейс для вибору дій після автентифікації, таких як початок логування даних (див. Б.4, рядок 51 - 61). Функція __change_turbine_id() та __change_logging_period() дозволяють змінити ідентифікатор вітряка та період логування відповідно (див. Б.4, рядок 73 - 94). Функція __start_logging() відповідає за зчитування даних з датчика, їх обробку та відправку на сервер в циклі (див. Б.4, рядок 96 - 124).

2.3.5 Модуль constants.py

Модуль constants.py містить постійні значення, які використовуються у програмі, такі як налаштування мережі, URL API та інтервали логування (див. весь файл).

2.3 Висновки

Впродовж цієї лабораторної роботи мною було розроблено програмне забезпечення для пристрою IoT, що є частиною програмної системи для автоматизованого управління вітровими електростанціями, описано архітектуру системи, програмну реалізацію, описано фізичну схему, її взаємодію з іншими частинами системи, розроблено діаграми, що демонструють роботу коду системи.

ПЕРЕЛІК ДЖЕРЕЛ

1.	Відеозапис. URL: https://youtu.be/-tyQnNEOPuU 
2.	Репозиторій з кодом. URL: https://github.com/NureFedorenkoVolodymyr/apz-pzpi-21-2-fedorenko-volodymyr 
3.	Проект у симуляторі. URL: https://wokwi.com/projects/398059490999458817 