1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ
1.1 Мета роботи

Метою лабораторної роботи є розробити мобільний застосунок для програмної системи для автоматизованого управління вітровими електростанціями.
Окрім цього необхідно навести опис прийнятих інженерних рішень, показати будову веб-компонентів та структуру проекту.

1.2 Моделювання програмної системи

Система має розподіл за двома ролями користувачів, проте мобільний застосунок націлено на використання звичайними користувачами.
Для демонстрації функціональності було розроблено UML діаграму прецедентів для користувача (див. А.1).
У програмній системі користувач має можливість:
-	Взаємодіяти з особистим акаунтом:
-	Входити/виходити з системи
-	Перемикати мову додатку (англійська/українська)
-	Взаємодіяти з вітряками:
-	Переглядати власні вітряки
-	Переглядати інформацію про вітряк, статистику його роботи, об’єм виробленої енергії 



2 ПРОГРАМНА РЕАЛІЗАЦІЯ МОБІЛЬНОГО ЗАСТОСУНКУ
2.1 Архітектура системи

Для розробки клієнтської частини було використано платформу .NET MAUI, мову програмування C# та мову розмітки XAML.
Проект має наступну структуру:
-	Models – містить в собі основні моделі системи.
-	Platforms – службова директорія, містить файли для кожної з підтримуваних платформ.
-	Resources – містить в собі основні ресурси: шрифти, стилі, зображення тощо.
-	Services – містить основні сервіси, що використовуються в додатку.
-	Utils – містить в собі допоміжні класи.
-	Views – містить в собі сторінки додатку.
Клієнтська частина взаємодіє з сервером ASP.NET Web Api з використанням HTTP-запитів, таких як GET та POST.
Було розроблено UML діаграму компонент для демонстрації структури компонентів системи (див. А.3).

2.2 Розробка системи
	
Основний функціонал системи – перегляд інформації про вітряки та повідомлення.
Було розроблено UML діаграму станів (див. А.2) та UML діаграму діяльності (див. А.4) для демонстрації взаємодії користувача та системи.

2.2.1 Сервіс ApiService

Сервіс містить логіку взаємодії з сервером через HTTP запити. Клас ApiService реалізує інтерфейс IApiService, що забезпечує методи для взаємодії з API сервера. Конструктор ініціалізує HttpClient для виконання HTTP запитів, встановлює базову адресу API залежно від платформи (Android чи інша), та встановлює параметри серіалізації JSON з політикою іменування CamelCase (див. Б.1, рядок 20 - 33).
Метод GetTurbineDataAsync є асинхронним методом, який отримує дані про вітряк за заданий період. Він перевіряє наявність інтернет-з'єднання, встановлює токен авторизації у заголовки запиту, виконує HTTP GET запит до API для отримання даних, та десеріалізує відповідь у список об'єктів TurbineData (див. Б.1, рядок 113 - 145). Інші методи включають LoginAsync (див. Б.1, рядок 35 - 68), який виконує авторизацію користувача, IsAuthenticated (див. Б.1, рядок 70 - 77), що перевіряє, чи користувач аутентифікований, GetMyTurbinesAsync (див. Б.1, рядок 79 - 111), який отримує список вітряків, що належать користувачу, GetUserProfileAsync (див. Б.1, рядок 147 - 180), який отримує інформацію про профіль користувача, та GetMyAlertsAsync (див. Б.1, рядок 182 - 215), який отримує список попереджень для користувача. Допоміжні методи включають GetAuthToken (див. Б.1, рядок 217 - 222) для отримання токена авторизації з захищеного сховища, CheckInternetConnection (див. Б.1, рядок 224 - 235) для перевірки наявності інтернет-з'єднання, HandleException (див. Б.1, рядок 237 - 241) для обробки виключень, що виникають під час запитів, та CheckHttpRequestSuccess (див. Б.1, рядок 243 - 259) для перевірки успішності HTTP запитів.

2.2.2 Сторінка TurbinesPage

C# файл містить логіку роботи сторінки, включаючи завантаження даних та обробку подій. Клас TurbineDetailsPage наслідує ContentPage і реалізує інтерфейс INotifyPropertyChanged для підтримки двостороннього зв'язку даних. Основні поля та властивості включають _apiService, яке є приватним полем для зберігання екземпляра сервісу API, використовуваного для взаємодії з сервером, Turbine, яке є полем для зберігання інформації про поточний вітряк, та _turbineData і TurbineData, які є властивостями з підтримкою повідомлень про зміни для зберігання та відображення даних вітряка (див. Б.2, рядок 9 - 26).
Конструктор сторінки ініціалізує компоненти сторінки та встановлює контекст даних, ініціалізує _apiService за допомогою нового екземпляра ApiService та створює порожній ObservableCollection для TurbineData. Також викликає метод SetTurbineLabels, щоб заповнити елементи інтерфейсу відповідними значеннями (див. Б.2, рядок 28 - 41). Подія OnAppearing є перевантаженим методом, який викликається при відображенні сторінки, та викликає асинхронний метод LoadData для завантаження даних про вітряк з сервера (див. Б.2, рядок 43 - 48).
Метод LoadData є асинхронним методом, який визначає початок і кінець періоду (останні два місяці) для запиту даних, викликає метод GetTurbineDataAsync сервісу _apiService для отримання даних вітряка за вказаний період, очищує поточну колекцію TurbineData та додає нові отримані дані (див. Б.2, рядок 50 - 63). Метод SetTurbineLabels встановлює значення елементів інтерфейсу для відображення атрибутів вітряка (ідентифікатор, статус, радіус, площа охоплення, широта, довгота, висота, ефективність) (див. Б.2, рядок 65 - 82). Метод OnPropertyChanged викликається при зміні значення властивості, щоб повідомити інтерфейс про зміни (див. Б.2, рядок 84 - 92).

	 
ПЕРЕЛІК ДЖЕРЕЛ
1.	DEMO відео. URL: https://youtu.be/Wm506uCs2Mo
2.	Репозиторій проекту. URL: https://github.com/NureFedorenkoVolodymyr/apz-pzpi-21-2-fedorenko-volodymyr
