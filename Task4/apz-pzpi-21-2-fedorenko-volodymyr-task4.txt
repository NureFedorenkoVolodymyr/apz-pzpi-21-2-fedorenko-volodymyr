1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ
1.1 Мета роботи

Метою лабораторної роботи є розробити клієнтську частину для програмної системи для автоматизованого управління вітровими електростанціями.
Окрім цього необхідно навести опис прийнятих інженерних рішень, показати будову веб-компонентів та структуру проекту.

1.2 Моделювання програмної системи

З використанням програмної системи користувачі повинні мати можливість зберігати, редагувати, видаляти, отримувати статистику за інформацією, що стосується роботи вітрових електростанцій.
Система має розподіл за двома ролями користувачів:
-	Звичайний користувач;
-	Адміністратор системи.
Було розроблено UML діаграму прецедентів для користувача та адміністратора (див. А.1).
У програмній системі користувач має можливість:
-	Взаємодіяти з особистим акаунтом:
-	Реєструватись у системі
-	Входити/виходити з системи
-	Взаємодіяти з власними фермами:
-	Переглядати власні ферми
-	Додавати/редагувати/видаляти ферми
-	Переглядати їх детальну інформацію
-	Переглядати список вітряків ферми та статистику їх роботи
-	Взаємодіяти з вітряками:
-	Переглядати власні вітряки
-	Додавати/редагувати/видаляти вітряки
-	Переглядати інформацію про вітряк, статистику його роботи, об’єм виробленої енергії
В той же час адміністратор має можливість:
-	Керувати системою:
-	Видаляти ферми
-	Видаляти вітряки
-	Переглядати адміністраторів/користувачів
-	Видаляти адміністраторів/користувачів
-	Реєструвати адміністраторів
-	Переглядати стан системи:
-	Переглядати усі ферми
-	Переглядати усі вітряки 



2 ПРОГРАМНА РЕАЛІЗАЦІЯ КЛІЄНТСЬКОЇ ЧАСТИНИ
2.1 Архітектура системи

Для розробки клієнтської частини було використано фреймворк Angular 17, мову програмування Typescript та мови HTML та CSS.
Для дизайну застосовується бібліотека Angular Material.
Для зображення графіків використовується бібліотека ApexCharts.
Проект має наступну структуру:
-	Components – відповідають за представлення в системі.
-	Guards – обмежують доступ користувачів до певних шляхів.
-	Interceptors – додає токен авторизації до кожного запиту.
-	Services – відповідають за взаємодію з сервером.
-	Assets – містять в собі статичні файли (зображення), а також основні моделі системи.
Клієнтська частина взаємодіє з сервером ASP.NET Web Api з використанням HTTP-запитів, таких як GET, POST, PUT, DELETE.
Було розроблено UML діаграму компонент для демонстрації структури компонентів системи (див. А.3).

2.2 Розробка системи
	
Основний функціонал системи – перегляд інформації про ферми та вітряки. Робота компонентів, що відповідають за це, відбувається в наступному порядку.
Було розроблено UML діаграму станів (див. А.2) та UML діаграму діяльності (див. А.4) для демонстрації взаємодії користувача та системи.

2.2.1 Компонент FarmsDetailsComponent

Використовуються Angular ін'єкції для сервісів FarmService, AuthService, TurbineService, Router, ActivatedRoute та MatDialog (див. Б.1 , рядок 29 - 34).
Оголошуються змінні для зберігання даних про ферму (farm), список вітряків (turbines), кількість операційних вітряків (operationalTurbinesCount), зведені дані про вітрякіи (turbinesCombinedData), колонки для відображення в таблиці (turbinesDisplayedColumns, turbinesColumnNames, turbinesDisplayedColumnsWithExpand) та змінна для розширеного вітряка (expandedTurbine) (див. Б.1 , рядок 38 - 68).
Метод ngOnInit виконується під час ініціалізації компонента. Отримує ідентифікатор ферми з маршруту, перевіряє, чи користувач є адміністратором, завантажує дані про ферму та вітряки за допомогою відповідних сервісів, обчислює кількість працюючих вітряків та викликає метод getStats для обчислення статистичних даних (див. Б.1 , рядок 70 - 88).
Метод getStats обчислює середню швидкість вітру, середню номінальну потужність та загальну потужність вітряків за певний період часу (початок і кінець дня). Використовує метод forkJoin для паралельного запиту історичних даних для кожного вітряка та обчислює середні значення на основі отриманих даних (див. Б.1 , рядок 90 - 131).

2.2.2 Компонент TurbinesDetailsComponent

Метод ngOnInit виконується під час ініціалізації компонента. Перевіряє, чи користувач є адміністратором, завантажує історичні дані про вітряки за допомогою TurbineService, сортує їх за датою та оновлює графік (див. Б.2 , рядок 31 - 49).
Метод updateChart оновлює налаштування графіку на основі отриманих даних про вітряк. Встановлює серію даних для графіку, тип графіку, налаштування осей, підписи, криву та формат відображення даних (див. Б.2 , рядок 76 - 129).

	 
ПЕРЕЛІК ДЖЕРЕЛ
1.	DEMO відео. URL: https://youtu.be/ay6c5tj3mYo
2.	Репозиторій проекту. URL: https://github.com/NureFedorenkoVolodymyr/apz-pzpi-21-2-fedorenko-volodymyr
